SinglyLinkedListNode* mergeLists(SinglyLinkedListNode* head1, SinglyLinkedListNode* head2) {
    // If either list is empty, return the other
    if (!head1) return head2;
    if (!head2) return head1;

    // Dummy node to simplify pointer handling
    SinglyLinkedListNode dummy;
    SinglyLinkedListNode* tail = &dummy;
    dummy.next = NULL;

    // Traverse both lists and pick smaller node each time
    while (head1 && head2) {
        if (head1->data <= head2->data) {
            tail->next = head1;
            head1 = head1->next;
        } else {
            tail->next = head2;
            head2 = head2->next;
        }
        tail = tail->next;
    }

    // Append the remaining nodes
    if (head1) tail->next = head1;
    if (head2) tail->next = head2;

    // The merged list starts at dummy.next
    return dummy.next;
}

int* solve(int arr_count, int* arr, int queries_count, int* queries, int* result_count) {
    *result_count = queries_count;
    int* results = malloc(queries_count * sizeof(int));

    for (int qi = 0; qi < queries_count; qi++) {
        int k = queries[qi];

        // Deque for indices
        int* deque = malloc(arr_count * sizeof(int));
        int front = 0, back = -1;

        int min_of_max = INT_MAX;

        for (int i = 0; i < arr_count; i++) {
            // Remove from back all elements <= arr[i]
            while (back >= front && arr[deque[back]] <= arr[i]) {
                back--;
            }
            deque[++back] = i;

            // Remove out-of-window indices
            if (deque[front] <= i - k) {
                front++;
            }

            // If window is full, record the maximum
            if (i >= k - 1) {
                int window_max = arr[deque[front]];
                if (window_max < min_of_max) {
                    min_of_max = window_max;
                }
            }
        }

        results[qi] = min_of_max;
        free(deque);
    }

    return results;
}
